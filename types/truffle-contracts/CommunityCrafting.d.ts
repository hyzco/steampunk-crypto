/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface CommunityCraftingContract
  extends Truffle.Contract<CommunityCraftingInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<CommunityCraftingInstance>;
}

type AllEvents = never;

export interface CommunityCraftingInstance extends Truffle.ContractInstance {
  craft: {
    (recipeAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      recipeAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      recipeAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipeAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  createRecipe: {
    (
      itemAddress: string,
      sff: number | BN | string,
      owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      itemAddress: string,
      sff: number | BN | string,
      owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      itemAddress: string,
      sff: number | BN | string,
      owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      itemAddress: string,
      sff: number | BN | string,
      owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getRecipe(
    recipe: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    itemAddress: string;
    sff: BN;
    owner: string;
    exists: boolean;
    createdAt: BN;
  }>;

  payOut: {
    (
      sff: number | BN | string,
      owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      sff: number | BN | string,
      owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sff: number | BN | string,
      owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sff: number | BN | string,
      owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  uniswapV2Router(txDetails?: Truffle.TransactionDetails): Promise<string>;

  methods: {
    craft: {
      (recipeAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        recipeAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        recipeAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        recipeAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    createRecipe: {
      (
        itemAddress: string,
        sff: number | BN | string,
        owner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        itemAddress: string,
        sff: number | BN | string,
        owner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        itemAddress: string,
        sff: number | BN | string,
        owner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        itemAddress: string,
        sff: number | BN | string,
        owner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getRecipe(
      recipe: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      itemAddress: string;
      sff: BN;
      owner: string;
      exists: boolean;
      createdAt: BN;
    }>;

    payOut: {
      (
        sff: number | BN | string,
        owner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        sff: number | BN | string,
        owner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        sff: number | BN | string,
        owner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        sff: number | BN | string,
        owner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    uniswapV2Router(txDetails?: Truffle.TransactionDetails): Promise<string>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
